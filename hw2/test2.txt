ALL RIGHTS RESERVED. No part of this work covered by the copy- right herein may be reproduced, transmitted, stored or used in any form or by any means graphic, electronic, or mechanical, including but not limited to photocopying, recording, scanning, digitizing, tap- ing, Web distribution, information networks, or information storage and retrieval systems, except as permitted under Section 107 or 108 of the 1976 United States Copyright Act, without the prior written permission of the publisher.States Copyright Act, without the prior written permission of the publisher.
Library of Congress Control Number: 2012938665 ISBN-13: 978-1-133-18779-0
ISBN-10: 1-133-18779-X
Cengage Learning
20 Channel Center Street Boston, MA 02210
USA
Cengage Learning is a leading provider of customized learning solu- tions with office locations around the globe, including Singapore, the United Kingdom, Australia, Mexico, Brazil, and Japan. Locate your local office at: international.cengage.com/region
Cengage Learning products are represented in Canada by Nelson Education, Ltd.
For your lifelong learning solutions, visit www.cengage.com Cengage Learning reserves the right to revise this publication and
make changes from time to time in its content without notice.
The programs in this book are for instructional purposes only. They have been tested with care, but are not guaranteed for any particular intent beyond educational purposes. The author and the publisher do not offer any warranties or representations, nor do they accept any liabilities with respect to the programs.
For product information and technology assistance, contact us at
Cengage Learning Customer & Sales Support, 1-800-354-9706
For permission to use material from this text or product, submit all requests online at cengage.com/permissions Further permissions questions can be emailed to permissionrequest@cengage.com
Printed in the United States of America 1 2 3 4 5 6 7 8 16 15 14 13 12
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
To Ina, Rachel, and Aaron
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
CONTENTS
Preface to the First Edition xi
Tothestudent........................... xi Totheeducator .......................... xii The first edition . . . . . . . . . . . . . . . . . . . . . . . . . . xiii Feedbacktotheauthor ...................... xiii Acknowledgments......................... xiv
Preface to the Second Edition xvii
Preface to the Third Edition xxi
0 Introduction 1
0.1 Automata,Computability,andComplexity . . . . . . . . . . . . . 1 Complexitytheory......................... 2 Computabilitytheory ....................... 3 Automatatheory.......................... 3
0.2 MathematicalNotionsandTerminology . . . . . . . . . . . . . . 3 Sets................................. 3 Sequencesandtuples ....................... 6 Functionsandrelations ...................... 7 Graphs............................... 10 Stringsandlanguages ....................... 13 Booleanlogic............................ 14 Summaryofmathematicalterms ................. 16
0.3 Definitions,Theorems,andProofs ................. 17 Findingproofs........................... 17 0.4 TypesofProof ............................ 21 Proofbyconstruction....................... 21 Proofbycontradiction....................... 21 Proofbyinduction......................... 22 Exercises,Problems,andSolutions ................... 25
v
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
vi CONTENTS
Part One: Automata and Languages 29
1 Regular Languages 31
1.1 FiniteAutomata ........................... 31 Formaldefinitionofafiniteautomaton . . . . . . . . . . . . . 35 Examplesoffiniteautomata.................... 37 Formaldefinitionofcomputation ................ 40 Designingfiniteautomata..................... 41 Theregularoperations ...................... 44
1.2 Nondeterminism........................... 47 Formal definition of a nondeterministic finite automaton . . . . 53 EquivalenceofNFAsandDFAs ................. 54 Closureundertheregularoperations. . . . . . . . . . . . . . . 58
1.3 RegularExpressions ......................... 63 Formaldefinitionofaregularexpression . . . . . . . . . . . . 64 Equivalencewithfiniteautomata................. 66
1.4 NonregularLanguages........................ 77 Thepumpinglemmaforregularlanguages . . . . . . . . . . . 77 Exercises,Problems,andSolutions ................... 82
2 Context-Free Languages 101
2.1 Context-FreeGrammars.......................102 Formal definition of a context-free grammar . . . . . . . . . . 104 Examplesofcontext-freegrammars ...............105 Designingcontext-freegrammars ................106 Ambiguity .............................107 Chomskynormalform ......................108
2.2 PushdownAutomata.........................111 Formaldefinitionofapushdownautomaton. . . . . . . . . . . 113 Examples of pushdown automata . . . . . . . . . . . . . . . . . 114 Equivalencewithcontext-freegrammars. . . . . . . . . . . . . 117
2.3 Non-Context-FreeLanguages....................125 The pumping lemma for context-free languages . . . . . . . . . 125
2.4 DeterministicContext-FreeLanguages. . . . . . . . . . . . . . . 130 PropertiesofDCFLs .......................133 Deterministiccontext-freegrammars . . . . . . . . . . . . . . 135 Relationship of DPDAs and DCFGs . . . . . . . . . . . . . . . 146 Parsing and LR(k) Grammars . . . . . . . . . . . . . . . . . . . 151 Exercises,Problems,andSolutions ...................154
Part Two: Computability Theory 163
3 The Church–Turing Thesis 165
3.1 TuringMachines...........................165 FormaldefinitionofaTuringmachine . . . . . . . . . . . . . . 167
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
Examples of Turing machines . . . . . . . . . . . . . . . . . . . 170
3.2 VariantsofTuringMachines.....................176 MultitapeTuringmachines ....................176 NondeterministicTuringmachines. . . . . . . . . . . . . . . . 178 Enumerators . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 Equivalence with other models . . . . . . . . . . . . . . . . . . 181
3.3 TheDefinitionofAlgorithm ....................182 Hilbert’s problems . . . . . . . . . . . . . . . . . . . . . . . . . 182 Terminology for describing Turing machines . . . . . . . . . . 184 Exercises,Problems,andSolutions ...................187
4 Decidability 193
4.1 DecidableLanguages.........................194 Decidable problems concerning regular languages . . . . . . . 194 Decidable problems concerning context-free languages . . . . . 198
4.2 Undecidability ............................201 Thediagonalizationmethod ...................202 Anundecidablelanguage .....................207 A Turing-unrecognizable language . . . . . . . . . . . . . . . . 209
Exercises,Problems,andSolutions ...................210
5 Reducibility 215
5.1 Undecidable Problems from Language Theory . . . . . . . . . . 216 Reductionsviacomputationhistories. . . . . . . . . . . . . . . 220
5.2 ASimpleUndecidableProblem...................227
5.3 MappingReducibility ........................234 Computable functions . . . . . . . . . . . . . . . . . . . . . . . 234 Formaldefinitionofmappingreducibility . . . . . . . . . . . . 235 Exercises,Problems,andSolutions ...................239
6 Advanced Topics in Computability Theory 245
6.1 TheRecursionTheorem.......................245 Self-reference ...........................246 Terminologyfortherecursiontheorem . . . . . . . . . . . . . 249 Applications ............................250
6.2 Decidabilityoflogicaltheories ...................252 A decidable theory . . . . . . . . . . . . . . . . . . . . . . . . . 255 An undecidable theory . . . . . . . . . . . . . . . . . . . . . . . 257
6.3 TuringReducibility..........................260
6.4 ADefinitionofInformation.....................261 Minimallengthdescriptions ...................262 Optimality of the definition . . . . . . . . . . . . . . . . . . . . 266 Incompressiblestringsandrandomness . . . . . . . . . . . . . 267 Exercises,Problems,andSolutions ...................270
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
CONTENTS vii
viii CONTENTS
Part Three: Complexity Theory 273
7 Time Complexity 275
7.1 MeasuringComplexity........................275 Big-O and small-o notation . . . . . . . . . . . . . . . . . . . . 276 Analyzingalgorithms .......................279 Complexityrelationshipsamongmodels . . . . . . . . . . . . . 282
7.2 TheClassP..............................284 Polynomial time . . . . . . . . . . . . . . . . . . . . . . . . . . 284 ExamplesofproblemsinP ....................286
7.3 TheClassNP.............................292 ExamplesofproblemsinNP ...................295 ThePversusNPquestion ....................297
7.4 NP-completeness...........................299 Polynomialtimereducibility ...................300 Definition of NP-completeness . . . . . . . . . . . . . . . . . . 304 The Cook–Levin Theorem . . . . . . . . . . . . . . . . . . . . 304
7.5 AdditionalNP-completeProblems .................311 The vertex cover problem . . . . . . . . . . . . . . . . . . . . . 312 TheHamiltonianpathproblem .................314 Thesubsetsumproblem .....................319
Exercises,Problems,andSolutions ...................322
8 Space Complexity 331
8.1 Savitch’sTheorem ..........................333
8.2 TheClassPSPACE .........................336
8.3 PSPACE-completeness .......................337
The TQBF problem . . . . . . . . . . . . . . . . . . . . . . . . 338 Winning strategies for games . . . . . . . . . . . . . . . . . . . 341 Generalizedgeography ......................343
8.4 TheClassesLandNL........................348
8.5 NL-completeness ..........................351 Searchingingraphs ........................353
8.6 NLequalscoNL...........................354 Exercises,Problems,andSolutions ...................356
9 Intractability 363
9.1 HierarchyTheorems.........................364 Exponentialspacecompleteness .................371
9.2 Relativization.............................376 Limitsofthediagonalizationmethod . . . . . . . . . . . . . . 377
9.3 CircuitComplexity..........................379 Exercises,Problems,andSolutions ...................388
10 Advanced Topics in Complexity Theory 393
10.1ApproximationAlgorithms .....................393
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
10.2 Probabilistic Algorithms . . . . . . . . . . . . . . . . . . . . . . . 396 TheclassBPP ...........................396 Primality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399 Read-once branching programs . . . . . . . . . . . . . . . . . . 404
10.3Alternation ..............................408 Alternatingtimeandspace ....................410 The Polynomial time hierarchy . . . . . . . . . . . . . . . . . . 414
10.4InteractiveProofSystems ......................415 Graph nonisomorphism . . . . . . . . . . . . . . . . . . . . . . 415 Definitionofthemodel ......................416 IP=PSPACE ...........................418
10.5ParallelComputation ........................427 Uniform Boolean circuits . . . . . . . . . . . . . . . . . . . . . 428 TheclassNC ...........................430 P-completeness ..........................432
10.6 Cryptography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433 Secret keys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433 Public-keycryptosystems .....................435 One-way functions . . . . . . . . . . . . . . . . . . . . . . . . . 435 Trapdoorfunctions ........................437
Exercises,Problems,andSolutions ...................439 Selected Bibliography 443 Index 448
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
CONTENTS ix
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE FIRST EDITION
TO THE STUDENT
Welcome!
You are about to embark on the study of a fascinating and important subject: the theory of computation. It comprises the fundamental mathematical proper- ties of computer hardware, software, and certain applications thereof. In study- ing this subject, we seek to determine what can and cannot be computed, how quickly, with how much memory, and on which type of computational model. The subject has obvious connections with engineering practice, and, as in many sciences, it also has purely philosophical aspects.
I know that many of you are looking forward to studying this material but some may not be here out of choice. You may want to obtain a degree in com- puter science or engineering, and a course in theory is required—God knows why. After all, isn’t theory arcane, boring, and worst of all, irrelevant?
To see that theory is neither arcane nor boring, but instead quite understand- able and even interesting, read on. Theoretical computer science does have many fascinating big ideas, but it also has many small and sometimes dull details that can be tiresome. Learning any new subject is hard work, but it becomes easier and more enjoyable if the subject is properly presented. My primary ob- jective in writing this book is to expose you to the genuinely exciting aspects of computer theory, without getting bogged down in the drudgery. Of course, the only way to determine whether theory interests you is to try learning it.
xi
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
xii PREFACE TO THE FIRST EDITION
Theory is relevant to practice. It provides conceptual tools that practition- ers use in computer engineering. Designing a new programming language for a specialized application? What you learned about grammars in this course comes in handy. Dealing with string searching and pattern matching? Remember finite automata and regular expressions. Confronted with a problem that seems to re- quire more computer time than you can afford? Think back to what you learned about NP-completeness. Various application areas, such as modern cryptographic protocols, rely on theoretical principles that you will learn here.
Theory also is relevant to you because it shows you a new, simpler, and more elegant side of computers, which we normally consider to be complicated ma- chines. The best computer designs and applications are conceived with elegance in mind. A theoretical course can heighten your aesthetic sense and help you build more beautiful systems.
Finally, theory is good for you because studying it expands your mind. Com- puter technology changes quickly. Specific technical knowledge, though useful today, becomes outdated in just a few years. Consider instead the abilities to think, to express yourself clearly and precisely, to solve problems, and to know when you haven’t solved a problem. These abilities have lasting value. Studying theory trains you in these areas.
Practical considerations aside, nearly everyone working with computers is cu- rious about these amazing creations, their capabilities, and their limitations. A whole new branch of mathematics has grown up in the past 30 years to answer certain basic questions. Here’s a big one that remains unsolved: If I give you a large number—say, with 500 digits—can you find its factors (the numbers that divide it evenly) in a reasonable amount of time? Even using a supercomputer, no one presently knows how to do that in all cases within the lifetime of the universe! The factoring problem is connected to certain secret codes in modern cryptosys- tems. Find a fast way to factor, and fame is yours!
TO THE EDUCATOR
This book is intended as an upper-level undergraduate or introductory gradu- ate text in computer science theory. It contains a mathematical treatment of the subject, designed around theorems and proofs. I have made some effort to accommodate students with little prior experience in proving theorems, though more experienced students will have an easier time.
My primary goal in presenting the material has been to make it clear and interesting. In so doing, I have emphasized intuition and “the big picture” in the subject over some lower level details.
For example, even though I present the method of proof by induction in Chapter 0 along with other mathematical preliminaries, it doesn’t play an im- portant role subsequently. Generally, I do not present the usual induction proofs of the correctness of various constructions concerning automata. If presented clearly, these constructions convince and do not need further argument. An in- duction may confuse rather than enlighten because induction itself is a rather sophisticated technique that many find mysterious. Belaboring the obvious with
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE FIRST EDITION xiii
an induction risks teaching students that a mathematical proof is a formal ma- nipulation instead of teaching them what is and what is not a cogent argument.
AsecondexampleoccursinPartsTwoandThree,whereIdescribealgorithms in prose instead of pseudocode. I don’t spend much time programming Turing machines (or any other formal model). Students today come with a program- ming background and find the Church–Turing thesis to be self-evident. Hence I don’t present lengthy simulations of one model by another to establish their equivalence.
Besides giving extra intuition and suppressing some details, I give what might be called a classical presentation of the subject material. Most theorists will find the choice of material, terminology, and order of presentation consistent with that of other widely used textbooks. I have introduced original terminology in only a few places, when I found the standard terminology particularly obscure or confusing. For example, I introduce the term mapping reducibility instead of many–one reducibility.
Practice through solving problems is essential to learning any mathemati- cal subject. In this book, the problems are organized into two main categories called Exercises and Problems. The Exercises review definitions and concepts. The Problems require some ingenuity. Problems marked with a star are more difficult. I have tried to make the Exercises and Problems interesting challenges.
THE FIRST EDITION
Introduction to the Theory of Computation first appeared as a Preliminary Edition in paperback. The first edition differs from the Preliminary Edition in several substantial ways. The final three chapters are new: Chapter 8 on space complex- ity; Chapter 9 on provable intractability; and Chapter 10 on advanced topics in complexity theory. Chapter 6 was expanded to include several advanced topics in computability theory. Other chapters were improved through the inclusion of additional examples and exercises.
Comments from instructors and students who used the Preliminary Edition were helpful in polishing Chapters 0–7. Of course, the errors they reported have been corrected in this edition.
Chapters 6 and 10 give a survey of several more advanced topics in com- putability and complexity theories. They are not intended to comprise a cohesive unit in the way that the remaining chapters are. These chapters are included to allow the instructor to select optional topics that may be of interest to the serious student. The topics themselves range widely. Some, such as Turing reducibility and alternation, are direct extensions of other concepts in the book. Others, such as decidable logical theories and cryptography, are brief introductions to large fields.
FEEDBACK TO THE AUTHOR
The internet provides new opportunities for interaction between authors and readers. I have received much e-mail offering suggestions, praise, and criticism, and reporting errors for the Preliminary Edition. Please continue to correspond!
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
xiv PREFACE TO THE FIRST EDITION
I try to respond to each message personally, as time permits. The e-mail address
for correspondence related to this book is sipserbook@math.mit.edu .
A web site that contains a list of errata is maintained. Other material may be added to that site to assist instructors and students. Let me know what you would like to see there. The location for that site is
http://math.mit.edu/~sipser/book.html . ACKNOWLEDGMENTS
I could not have written this book without the help of many friends, colleagues, and my family.
I wish to thank the teachers who helped shape my scientific viewpoint and educational style. Five of them stand out. My thesis advisor, Manuel Blum, is due a special note for his unique way of inspiring students through clarity of thought, enthusiasm, and caring. He is a model for me and for many others. I am grateful to Richard Karp for introducing me to complexity theory, to John Addison for teaching me logic and assigning those wonderful homework sets, to Juris Hartmanis for introducing me to the theory of computation, and to my father for introducing me to mathematics, computers, and the art of teaching.
This book grew out of notes from a course that I have taught at MIT for the past 15 years. Students in my classes took these notes from my lectures. I hope they will forgive me for not listing them all. My teaching assistants over the years—Avrim Blum, Thang Bui, Benny Chor, Andrew Chou, Stavros Cos- madakis, Aditi Dhagat, Wayne Goddard, Parry Husbands, Dina Kravets, Jakov Kucˇan, Brian O’Neill, Ioana Popescu, and Alex Russell—helped me to edit and expand these notes and provided some of the homework problems.
Nearly three years ago, Tom Leighton persuaded me to write a textbook on the theory of computation. I had been thinking of doing so for some time, but it took Tom’s persuasion to turn theory into practice. I appreciate his generous advice on book writing and on many other things.
I wish to thank Eric Bach, Peter Beebee, Cris Calude, Marek Chrobak, Anna Chefter, Guang-Ien Cheng, Elias Dahlhaus, Michael Fischer, Steve Fisk, Lance Fortnow, Henry J. Friedman, Jack Fu, Seymour Ginsburg, Oded Goldreich, Brian Grossman, David Harel, Micha Hofri, Dung T. Huynh, Neil Jones, H. Chad Lane, Kevin Lin, Michael Loui, Silvio Micali, Tadao Murata, Chris- tos Papadimitriou, Vaughan Pratt, Daniel Rosenband, Brian Scassellati, Ashish Sharma, Nir Shavit, Alexander Shen, Ilya Shlyakhter, Matt Stallmann, Perry Susskind, Y. C. Tay, Joseph Traub, Osamu Watanabe, Peter Widmayer, David Williamson, Derick Wood, and Charles Yang for comments, suggestions, and assistance as the writing progressed.
The following people provided additional comments that have improved this book: Isam M. Abdelhameed, Eric Allender, Shay Artzi, Michelle Ather- ton, Rolfe Blodgett, Al Briggs, Brian E. Brooks, Jonathan Buss, Jin Yi Cai,
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE FIRST EDITION xv
Steve Chapel, David Chow, Michael Ehrlich, Yaakov Eisenberg, Farzan Fallah, Shaun Flisakowski, Hjalmtyr Hafsteinsson, C. R. Hale, Maurice Herlihy, Vegard Holmedahl, Sandy Irani, Kevin Jiang, Rhys Price Jones, James M. Jowdy, David M. Martin Jr., Manrique Mata-Montero, Ryota Matsuura, Thomas Minka, Farooq Mohammed, Tadao Murata, Jason Murray, Hideo Nagahashi, Kazuo Ohta, Constantine Papageorgiou, Joseph Raj, Rick Regan, Rhonda A. Reumann, Michael Rintzler, Arnold L. Rosenberg, Larry Roske, Max Rozenoer, Walter L. Ruzzo, Sanatan Sahgal, Leonard Schulman, Steve Seiden, Joel Seiferas, Ambuj Singh, David J. Stucki, Jayram S. Thathachar, H. Venkateswaran, Tom Whaley, Christopher Van Wyk, Kyle Young, and Kyoung Hwan Yun.
Robert Sloan used an early version of the manuscript for this book in a class that he taught and provided me with invaluable commentary and ideas from his experience with it. Mark Herschberg, Kazuo Ohta, and Latanya Sweeney read over parts of the manuscript and suggested extensive improvements. Shafi Goldwasser helped me with material in Chapter 10.
I received expert technical support from William Baxter at Superscript, who wrote the LATEX macro package implementing the interior design, and from Larry Nolan at the MIT mathematics department, who keeps things running.
It has been a pleasure to work with the folks at PWS Publishing in creat- ing the final product. I mention Michael Sugarman, David Dietz, Elise Kaiser, Monique Calello, Susan Garland and Tanja Brull because I have had the most contact with them, but I know that many others have been involved, too. Thanks to Jerry Moore for the copy editing, to Diane Levy for the cover design, and to Catherine Hawkes for the interior design.
I am grateful to the National Science Foundation for support provided under grant CCR-9503322.
My father, Kenneth Sipser, and sister, Laura Sipser, converted the book di- agrams into electronic form. My other sister, Karen Fisch, saved us in various computer emergencies, and my mother, Justine Sipser, helped out with motherly advice. I thank them for contributing under difficult circumstances, including insane deadlines and recalcitrant software.
Finally, my love goes to my wife, Ina, and my daughter, Rachel. Thanks for putting up with all of this.
Cambridge, Massachusetts Michael Sipser October, 1996
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE SECOND EDITION
Judging from the email communications that I’ve received from so many of you, the biggest deficiency of the first edition is that it provides no sample solutions to any of the problems. So here they are. Every chapter now contains a new Selected Solutions section that gives answers to a representative cross-section of that chapter’s exercises and problems. To make up for the loss of the solved problems as interesting homework challenges, I’ve also added a variety of new problems. Instructors may request an Instructor’s Manual that contains addi- tional solutions by contacting the sales representative for their region designated at www.course.com .
A number of readers would have liked more coverage of certain “standard” topics, particularly the Myhill–Nerode Theorem and Rice’s Theorem. I’ve par- tially accommodated these readers by developing these topics in the solved prob- lems. I did not include the Myhill–Nerode Theorem in the main body of the text because I believe that this course should provide only an introduction to finite automata and not a deep investigation. In my view, the role of finite automata here is for students to explore a simple formal model of computation as a prelude to more powerful models, and to provide convenient examples for subsequent topics. Of course, some people would prefer a more thorough treatment, while others feel that I ought to omit all references to (or at least dependence on) finite automata. I did not include Rice’s Theorem in the main body of the text because, though it can be a useful “tool” for proving undecidability, some students might
xvii
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
xviii PREFACE TO THE SECOND EDITION
use it mechanically without really understanding what is going on. Using reduc- tions instead, for proving undecidability, gives more valuable preparation for the reductions that appear in complexity theory.
I am indebted to my teaching assistants—Ilya Baran, Sergi Elizalde, Rui Fan, Jonathan Feldman, Venkatesan Guruswami, Prahladh Harsha, Christos Kapout- sis, Julia Khodor, Adam Klivans, Kevin Matulef, Ioana Popescu, April Rasala, Sofya Raskhodnikova, and Iuliu Vasilescu—who helped me to craft some of the new problems and solutions. Ching Law, Edmond Kayi Lee, and Zulfikar Ramzan also contributed to the solutions. I thank Victor Shoup for coming up with a simple way to repair the gap in the analysis of the probabilistic primality algorithm that appears in the first edition.
I appreciate the efforts of the people at Course Technology in pushing me and the other parts of this project along, especially Alyssa Pratt and Aimee Poirier. Many thanks to Gerald Eisman, Weizhen Mao, Rupak Majumdar, Chris Umans, and Christopher Wilson for their reviews. I’m indebted to Jerry Moore for his superb job copy editing and to Laura Segel of ByteGraphics (lauras@bytegraphics.com) for her beautiful rendition of the figures.
The volume of email I’ve received has been more than I expected. Hearing from so many of you from so many places has been absolutely delightful, and I’ve tried to respond to all eventually—my apologies for those I missed. I’ve listed here the people who made suggestions that specifically affected this edition, but I thank everyone for their correspondence:
Luca Aceto, Arash Afkanpour, Rostom Aghanian, Eric Allender, Karun Bak- shi, Brad Ballinger, Ray Bartkus, Louis Barton, Arnold Beckmann, Mihir Bel- lare, Kevin Trent Bergeson, Matthew Berman, Rajesh Bhatt, Somenath Biswas, Lenore Blum, Mauro A. Bonatti, Paul Bondin, Nicholas Bone, Ian Bratt, Gene Browder, Doug Burke, Sam Buss, Vladimir Bychkovsky, Bruce Carneal, Soma Chaudhuri, Rong-Jaye Chen, Samir Chopra, Benny Chor, John Clausen, Alli- son Coates, Anne Condon, Jeffrey Considine, John J. Crashell, Claude Crepeau, Shaun Cutts, Susheel M. Daswani, Geoff Davis, Scott Dexter, Peter Drake, Jeff Edmonds, Yaakov Eisenberg, Kurtcebe Eroglu, Georg Essl, Alexander T. Fader, Farzan Fallah, Faith Fich, Joseph E. Fitzgerald, Perry Fizzano, David Ford, Jeannie Fromer, Kevin Fu, Atsushi Fujioka, Michel Galley, K. Gane- san, Simson Garfinkel, Travis Gebhardt, Peymann Gohari, Ganesh Gopalakr- ishnan, Steven Greenberg, Larry Griffith, Jerry Grossman, Rudolf de Haan, Michael Halper, Nick Harvey, Mack Hendricks, Laurie Hiyakumoto, Steve Hockema, Michael Hoehle, Shahadat Hossain, Dave Isecke, Ghaith Issa, Raj D. Iyer, Christian Jacobi, Thomas Janzen, Mike D. Jones, Max Kanovitch, Aaron Kaufman, Roger Khazan, Sarfraz Khurshid, Kevin Killourhy, Seungjoo Kim, Victor Kuncak, Kanata Kuroda, Thomas Lasko, Suk Y. Lee, Edward D. Leg- enski, Li-Wei Lehman, Kong Lei, Zsolt Lengvarszky, Jeffrey Levetin, Baekjun Lim, Karen Livescu, Stephen Louie, TzerHung Low, Wolfgang Maass, Arash Madani, Michael Manapat, Wojciech Marchewka, David M. Martin Jr., Anders Martinson, Lyle McGeoch, Alberto Medina, Kurt Mehlhorn, Nihar Mehta, Al- bert R. Meyer, Thomas Minka, Mariya Minkova, Daichi Mizuguchi, G. Allen Morris III, Damon Mosk-Aoyama, Xiaolong Mou, Paul Muir, German Muller,
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE SECOND EDITION xix
Donald Nelson, Gabriel Nivasch, Mary Obelnicki, Kazuo Ohta, Thomas M. Oleson, Jr., Curtis Oliver, Owen Ozier, Rene Peralta, Alexander Perlis, Holger Petersen, Detlef Plump, Robert Prince, David Pritchard, Bina Reed, Nicholas Riley, Ronald Rivest, Robert Robinson, Christi Rockwell, Phil Rogaway, Max Rozenoer, John Rupf, Teodor Rus, Larry Ruzzo, Brian Sanders, Cem Say, Kim Schioett, Joel Seiferas, Joao Carlos Setubal, Geoff Lee Seyon, Mark Skandera, Bob Sloan, Geoff Smith, Marc L. Smith, Stephen Smith, Alex C. Snoeren, Guy St-Denis, Larry Stockmeyer, Radu Stoleru, David Stucki, Hisham M. Sueyllam, Kenneth Tam, Elizabeth Thompson, Michel Toulouse, Eric Tria, Chittaranjan Tripathy, Dan Trubow, Hiroki Ueda, Giora Unger, Kurt L. Van Etten, Jesir Vargas, Bienvenido Velez-Rivera, Kobus Vos, Alex Vrenios, Sven Waibel, Marc Waldman, Tom Whaley, Anthony Widjaja, Sean Williams, Joseph N. Wilson, Chris Van Wyk, Guangming Xing, Vee Voon Yee, Cheng Yongxi, Neal Young, Timothy Yuen, Kyle Yung, Jinghua Zhang, Lilla Zollei.
I thank Suzanne Balik, Matthew Kane, Kurt L. Van Etten, Nancy Lynch, Gregory Roberts, and Cem Say for pointing out errata in the first printing.
Most of all, I thank my family—Ina, Rachel, and Aaron—for their patience, understanding, and love as I sat for endless hours here in front of my computer screen.
Cambridge, Massachusetts Michael Sipser December, 2004
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
PREFACE TO THE THIRD EDITION
The third edition contains an entirely new section on deterministic context-free languages. I chose this topic for several reasons. First of all, it fills an obvious gap in my previous treatment of the theory of automata and languages. The older editions introduced finite automata and Turing machines in deterministic and nondeterministic variants, but covered only the nondeterministic variant of pushdown automata. Adding a discussion of deterministic pushdown automata provides a missing piece of the puzzle.
Second, the theory of deterministic context-free grammars is the basis for LR(k) grammars, an important and nontrivial application of automata theory in programming languages and compiler design. This application brings together several key concepts, including the equivalence of deterministic and nondeter- ministic finite automata, and the conversions between context-free grammars and pushdown automata, to yield an efficient and beautiful method for parsing. Here we have a concrete interplay between theory and practice.
Last, this topic seems underserved in existing theory textbooks, considering its importance as a genuine application of automata theory. I studied LR(k) gram- mars years ago but without fully understanding how they work, and without seeing how nicely they fit into the theory of deterministic context-free languages. My goal in writing this section is to give an intuitive yet rigorous introduction to this area for theorists as well as practitioners, and thereby contribute to its broader appreciation. One note of caution, however: Some of the material in this section is rather challenging, so an instructor in a basic first theory course
xxi
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
xxii PREFACE TO THE THIRD EDITION
may prefer to designate it as supplementary reading. Later chapters do not de- pend on this material.
Many people helped directly or indirectly in developing this edition. I’m in- debted to reviewers Christos Kapoutsis and Cem Say who read a draft of the new section and provided valuable feedback. Several individuals at Cengage Learning assisted with the production, notably Alyssa Pratt and Jennifer Feltri-George. Suzanne Huizenga copyedited the text and Laura Segel of ByteGraphics created the new figures and modified some of the older figures.
I wish to thank my teaching assistants at MIT, Victor Chen, Andy Drucker, Michael Forbes, Elena Grigorescu, Brendan Juba, Christos Kapoutsis, Jon Kel- ner, Swastik Kopparty, Kevin Matulef, Amanda Redlich, Zack Remscrim, Ben Rossman, Shubhangi Saraf, and Oren Weimann. Each of them helped me by discussing new problems and their solutions, and by providing insight into how well our students understood the course content. I’ve greatly enjoyed working with such talented and enthusiastic young people.
It has been gratifying to receive email from around the globe. Thanks to all for your suggestions, questions, and ideas. Here is a list of those correspondents whose comments affected this edition:
Djihed Afifi, Steve Aldrich, Eirik Bakke, Suzanne Balik, Victor Bandur, Paul Beame, Elazar Birnbaum, Goutam Biswas, Rob Bittner, Marina Blanton, Rod- ney Bliss, Promita Chakraborty, Lewis Collier, Jonathan Deber, Simon Dex- ter, Matt Diephouse, Peter Dillinger, Peter Drake, Zhidian Du, Peter Fe- jer, Margaret Fleck, Atsushi Fujioka, Valerio Genovese, Evangelos Georgiadis, Joshua Grochow, Jerry Grossman, Andreas Guelzow, Hjalmtyr Hafsteinsson, Arthur Hall III, Cihat Imamoglu, Chinawat Isradisaikul, Kayla Jacobs, Flem- ming Jensen, Barbara Kaiser, Matthew Kane, Christos Kapoutsis, Ali Durlov Khan, Edwin Sze Lun Khoo, Yongwook Kim, Akash Kumar, Eleazar Leal, Zsolt Lengvarszky, Cheng-Chung Li, Xiangdong Liang, Vladimir Lifschitz, Ryan Lortie, Jonathan Low, Nancy Lynch, Alexis Maciel, Kevin Matulef, Nelson Max, Hans-Rudolf Metz, Mladen Miksˆa, Sara Miner More, Rajagopal Nagara- jan, Marvin Nakayama, Jonas Nyrup, Gregory Roberts, Ryan Romero, Santhosh Samarthyam, Cem Say, Joel Seiferas, John Sieg, Marc Smith, John Steinberger, Nuri Tas ̧demir, Tamir Tassa, Mark Testa, Jesse Tjang, John Trammell, Hi- roki Ueda, Jeroen Vaelen, Kurt L. Van Etten, Guillermo Va ́zquez, Phanisekhar Botlaguduru Venkata, Benjamin Bing-Yi Wang, Lutz Warnke, David Warren, Thomas Watson, Joseph Wilson, David Wittenberg, Brian Wongchaowart, Kis- han Yerubandi, Dai Yi.
Above all, I thank my family—my wife, Ina, and our children, Rachel and Aaron. Time is finite and fleeting. Your love is everything.
Cambridge, Massachusetts Michael Sipser April, 2012
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
0
INTRODUCTION
We begin with an overview of those areas in the theory of computation that we present in this course. Following that, you’ll have a chance to learn and/or review some mathematical concepts that you will need later.
0.1
AUTOMATA, COMPUTABILITY, AND COMPLEXITY
This book focuses on three traditionally central areas of the theory of computa- tion: automata, computability, and complexity. They are linked by the question:
What are the fundamental capabilities and limitations of computers?
This question goes back to the 1930s when mathematical logicians first began to explore the meaning of computation. Technological advances since that time have greatly increased our ability to compute and have brought this question out of the realm of theory into the world of practical concern.
In each of the three areas—automata, computability, and complexity—this question is interpreted differently, and the answers vary according to the in- terpretation. Following this introductory chapter, we explore each area in a
1
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.

2 CHAPTER 0 / INTRODUCTION
separate part of this book. Here, we introduce these parts in reverse order be- cause by starting from the end you can better understand the reason for the beginning.
COMPLEXITY THEORY
Computer problems come in different varieties; some are easy, and some are hard. For example, the sorting problem is an easy one. Say that you need to arrange a list of numbers in ascending order. Even a small computer can sort a million numbers rather quickly. Compare that to a scheduling problem. Say that you must find a schedule of classes for the entire university to satisfy some reasonable constraints, such as that no two classes take place in the same room at the same time. The scheduling problem seems to be much harder than the sorting problem. If you have just a thousand classes, finding the best schedule may require centuries, even with a supercomputer.
What makes some problems computationally hard and others easy?
This is the central question of complexity theory. Remarkably, we don’t know the answer to it, though it has been intensively researched for over 40 years. Later, we explore this fascinating question and some of its ramifications.
In one important achievement of complexity theory thus far, researchers have discovered an elegant scheme for classifying problems according to their com- putational difficulty. It is analogous to the periodic table for classifying elements according to their chemical properties. Using this scheme, we can demonstrate a method for giving evidence that certain problems are computationally hard, even if we are unable to prove that they are.
You have several options when you confront a problem that appears to be computationally hard. First, by understanding which aspect of the problem is at the root of the difficulty, you may be able to alter it so that the problem is more easily solvable. Second, you may be able to settle for less than a perfect solution to the problem. In certain cases, finding solutions that only approximate the perfect one is relatively easy. Third, some problems are hard only in the worst case situation, but easy most of the time. Depending on the application, you may be satisfied with a procedure that occasionally is slow but usually runs quickly. Finally, you may consider alternative types of computation, such as randomized computation, that can speed up certain tasks.
One applied area that has been affected directly by complexity theory is the ancient field of cryptography. In most fields, an easy computational problem is preferable to a hard one because easy ones are cheaper to solve. Cryptography is unusual because it specifically requires computational problems that are hard, rather than easy. Secret codes should be hard to break without the secret key or password. Complexity theory has pointed cryptographers in the direction of computationally hard problems around which they have designed revolutionary new codes.
Copyright 2012 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it.
0.2 MATHEMATICAL NOTIONS AND TERMINOLOGY 3 COMPUTABILITY THEORY
During the first half of the twentieth century, mathematicians such as Kurt Go ̈ del, Alan Turing, and Alonzo Church discovered that certain basic problems cannot be solved by computers. One example of this phenomenon is the prob- lem of determining whether a mathematical statement is true or false. This task is the bread and butter of mathematicians. It seems like a natural for solution by computer because it lies strictly within the realm of mathematics. But no computer algorithm can perform this task.
Among the consequences of this profound result was the development of ideas concerning theoretical models of computers that eventually would help lead to the construction of actual computers.
The theories of computability and complexity are closely related. In com- plexity theory, the objective is to classify problems as easy ones and hard ones; whereas in computability theory, the classification of problems is by those that are solvable and those that are not. Computability theory introduces several of the concepts used in complexity theory.
AUTOMATA THEORY
Automata theory deals with the definitions and properties of mathematical mod- els of computation. These models play a role in several applied areas of computer science. One model, called the finite automaton, is used in text processing, com- pilers, and hardware design. Another model, called the context-free grammar, is used in programming languages and artificial intelligence.
Automata theory is an excellent place to begin the study of the theory of computation. The theories of computability and complexity require a precise definition of a computer. Automata theory allows 